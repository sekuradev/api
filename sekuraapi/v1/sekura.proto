syntax = "proto3";

package sekuraapi.v1;

option go_package = "github.com/sekuradev/api/sekura/pkg/sekuraapi/v1";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Sekura API";
    version: "1.0";
    description: "API description for Sekura services.";
    contact: {
      name: "Miguel Ángel García";
      url: "https://github.com/sekuradev/api";
      email: "miguelangel.garcia@gmail.com";
    };
    license: {
      name: "MIT";
      url: "https://opensource.org/licenses/MIT";
    };
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  base_path: "https://example.org";
};

// API for Agents
//
// This API is the one Agents should implement.
service AgentService {
  // Agent endpoint to send user data.
  rpc SetAccess(SetAccessRequest) returns (SetAccessResponse) {
    option (google.api.http) = {
      post: "/v1/agent/self/access"
      body: "*"
    };
  }
}

message SetAccessRequest{
  repeated Access accesses = 2;
}

message SetAccessResponse {
  // True if there was any error setting new Access configuration.
  bool error = 1;
  // Error message
  string msg = 2;
}

service UIService {
  // List all available agents
  rpc ListAgents (ListAgentsRequest) returns (stream ListAgentsResponse) {
    option (google.api.http) = {
      get: "/v1/agent"
    };
  }
  // Set agent status to Approved or Revoked
  rpc SetAgent(SetAgentRequest) returns(SetAgentResponse) {
    option (google.api.http) = {
      put: "/v1/agent/{agent_id=agent}"
    };
  }

  // Retrieve the list of employees
  rpc ListEmployees(ListEmployeesRequest) returns (stream ListEmployeesResponse) {
    option (google.api.http) = {
      get: "/v1/employees"
    };
  }

  // Retrieve the list of Accesses for a given Agent
  rpc ListAccess(ListAccessRequest) returns (stream ListAccessResponse) {
    option (google.api.http) = {
      get: "/v1/agent/{id=agentid}/access"
    };
  }
}

message ListAgentsRequest{
}

message ListAgentsResponse{
  // Agents
  Agent agents = 1;
}

message SetAgentRequest{
  // Agent id for the agent to be modified
  string agent_id = 1;
  // New status for atent
  string status = 2;
}

message SetAgentResponse{
  string msg = 1;
}

message ListEmployeesRequest{
}

message ListEmployeesResponse{
  Employee employees = 1;
}

message ListAccessRequest{
  // Agent id to ask for
  string id = 1;
}

message ListAccessResponse{
  // Usages for requested Agent
  AccessUsage accesses = 1;
}


// Shared objects

message Access{
  string id = 1;
  string internal_id = 2;
  map<string, string> properties = 3;
}

message Agent{
  string id = 1;
  string name = 2;
  string status = 3;
}

message Employee {
  // Employee internal identifier
  string id = 1;
  // Employee label
  string name = 2;
  // Employee current status
  string status = 3;
}

message AccessUsage {
  // Access object
  Access access = 1;
  // Related Employee object
  Employee employee = 2;
}
